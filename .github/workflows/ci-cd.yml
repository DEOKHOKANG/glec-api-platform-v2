name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        node-version: [18.x, 20.x]\n        \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n        \n    - name: Install dependencies\n      run: |\n        cd api-gateway\n        npm ci\n        \n    - name: Run TypeScript compilation\n      run: |\n        cd api-gateway\n        npm run build\n        \n    - name: Run ESLint\n      run: |\n        cd api-gateway\n        npm run lint\n        \n    - name: Run tests\n      run: |\n        cd api-gateway\n        npm test\n      env:\n        NODE_ENV: test\n        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}\n        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}\n        JWT_SECRET: test-secret-key-for-ci\n        \n  docker-build:\n    runs-on: ubuntu-latest\n    needs: test\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Docker Buildx\n      uses: docker/setup-buildx-action@v3\n      \n    - name: Build Docker image\n      run: |\n        docker build -t glec-api-gateway:test ./api-gateway\n        \n    - name: Test Docker container\n      run: |\n        docker run -d --name test-container -p 3000:3000 \\\n          -e NODE_ENV=test \\\n          -e JWT_SECRET=test-secret \\\n          glec-api-gateway:test\n        sleep 10\n        curl -f http://localhost:3000/health || exit 1\n        docker stop test-container\n        docker rm test-container\n        \n  deploy-staging:\n    runs-on: ubuntu-latest\n    needs: [test, docker-build]\n    if: github.ref == 'refs/heads/develop'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Deploy to staging\n      run: |\n        echo \"Deploying to staging environment...\"\n        # 스테이징 배포 로직이 여기에 추가될 예정\n        \n  deploy-production:\n    runs-on: ubuntu-latest\n    needs: [test, docker-build]\n    if: github.ref == 'refs/heads/main'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Deploy to production\n      run: |\n        echo \"Deploying to production environment...\"\n        # 프로덕션 배포 로직이 여기에 추가될 예정\n        \n  postman-tests:\n    runs-on: ubuntu-latest\n    needs: test\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        \n    - name: Install Newman\n      run: npm install -g newman\n      \n    - name: Run Postman tests\n      run: |\n        echo \"Postman 컬렉션이 준비되면 여기서 테스트가 실행됩니다\"\n        # newman run postman/GLEC-API-Collection.json -e postman/environments/ci.json\n      continue-on-error: true\n        \n  security-scan:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        \n    - name: Install dependencies\n      run: |\n        cd api-gateway\n        npm ci\n        \n    - name: Run security audit\n      run: |\n        cd api-gateway\n        npm audit --audit-level=moderate\n        \n    - name: Run dependency check\n      run: |\n        npx audit-ci --moderate\n      continue-on-error: true\n